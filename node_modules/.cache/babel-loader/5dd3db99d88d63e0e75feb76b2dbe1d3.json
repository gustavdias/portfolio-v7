{"ast":null,"code":"var _jsxFileName = \"/home/khan/code/gustavdias/deploy/portfolio-v5/src/components/MainProjects/MainProjects.js\";\nimport React, { useState } from 'react';\nimport { useSprings, animated, interpolate } from 'react-spring';\nimport { useGesture } from 'react-use-gesture';\nimport './MainProjects.css';\nexport default function MainProjects() {\n  const cards = ['https://upload.wikimedia.org/wikipedia/en/f/f5/RWS_Tarot_08_Strength.jpg', 'https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg', 'https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg', 'https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg', 'https://upload.wikimedia.org/wikipedia/en/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg', 'https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg']; // These two are just helpers, they curate spring data, values that are later being interpolated into css\n\n  const to = i => ({\n    x: 0,\n    y: i * -4,\n    scale: 1,\n    rot: -10 + Math.random() * 20,\n    delay: i * 100\n  });\n\n  const from = i => ({\n    x: 0,\n    rot: 0,\n    scale: 1.5,\n    y: -1000\n  }); // This is being used down there in the view, it interpolates rotation and scale into a css transform\n\n\n  const trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`;\n\n  const [gone] = useState(() => new Set()); // The set flags all the cards that are flicked out\n\n  const [props, set] = useSprings(cards.length, i => ({ ...to(i),\n    from: from(i)\n  })); // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n\n  const bind = useGesture(({\n    args: [index],\n    down,\n    delta: [xDelta],\n    distance,\n    direction: [xDir],\n    velocity\n  }) => {\n    const trigger = velocity > 0.2; // If you flick hard enough it should trigger the card to fly out\n\n    const dir = xDir < 0 ? -1 : 1; // Direction should either point left or right\n\n    if (!down && trigger) gone.add(index); // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n\n    set(i => {\n      if (index !== i) return; // We're only interested in changing spring-data for the current spring\n\n      const isGone = gone.has(index);\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0; // When a card is gone it flys out left or right, otherwise goes back to zero\n\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0); // How much the card tilts, flicking it harder makes it rotate faster\n\n      const scale = down ? 1.1 : 1; // Active cards lift up a bit\n\n      return {\n        x,\n        rot,\n        scale,\n        delay: undefined,\n        config: {\n          friction: 50,\n          tension: down ? 800 : isGone ? 200 : 500\n        }\n      };\n    });\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600);\n  });\n  return props.map(({\n    x,\n    y,\n    rot,\n    scale\n  }, i) => /*#__PURE__*/React.createElement(animated.div, {\n    key: i,\n    style: {\n      transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(animated.div, Object.assign({}, bind(i), {\n    style: {\n      transform: interpolate([rot, scale], trans),\n      backgroundImage: `url(${cards[i]})`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }))));\n}","map":{"version":3,"sources":["/home/khan/code/gustavdias/deploy/portfolio-v5/src/components/MainProjects/MainProjects.js"],"names":["React","useState","useSprings","animated","interpolate","useGesture","MainProjects","cards","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","gone","Set","props","set","length","bind","args","index","down","delta","xDelta","distance","direction","xDir","velocity","trigger","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","transform","backgroundImage"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useSprings, animated, interpolate } from 'react-spring'\nimport { useGesture } from 'react-use-gesture'\nimport './MainProjects.css'\n\n\nexport default function MainProjects() {\n\n    const cards = [\n        'https://upload.wikimedia.org/wikipedia/en/f/f5/RWS_Tarot_08_Strength.jpg',\n        'https://upload.wikimedia.org/wikipedia/en/5/53/RWS_Tarot_16_Tower.jpg',\n        'https://upload.wikimedia.org/wikipedia/en/9/9b/RWS_Tarot_07_Chariot.jpg',\n        'https://upload.wikimedia.org/wikipedia/en/d/db/RWS_Tarot_06_Lovers.jpg',\n        'https://upload.wikimedia.org/wikipedia/en/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg',\n        'https://upload.wikimedia.org/wikipedia/en/d/de/RWS_Tarot_01_Magician.jpg'\n      ]\n      \n      // These two are just helpers, they curate spring data, values that are later being interpolated into css\n      const to = i => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\n      const from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 })\n      // This is being used down there in the view, it interpolates rotation and scale into a css transform\n      const trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\n      \n      \n      \n\n    const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\n  const [props, set] = useSprings(cards.length, i => ({ ...to(i), from: from(i) })) // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n  const bind = useGesture(({ args: [index], down, delta: [xDelta], distance, direction: [xDir], velocity }) => {\n    const trigger = velocity > 0.2 // If you flick hard enough it should trigger the card to fly out\n    const dir = xDir < 0 ? -1 : 1 // Direction should either point left or right\n    if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n    set(i => {\n      if (index !== i) return // We're only interested in changing spring-data for the current spring\n      const isGone = gone.has(index)\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\n      const scale = down ? 1.1 : 1 // Active cards lift up a bit\n      return { x, rot, scale, delay: undefined, config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 } }\n    })\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600)\n  })\n  return props.map(({ x, y, rot, scale }, i) => (\n    <animated.div key={i} style={{ transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) }}>\n      {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\n      <animated.div {...bind(i)} style={{ transform: interpolate([rot, scale], trans), backgroundImage: `url(${cards[i]})` }} />\n    </animated.div>\n  ))\n}\n\n\n"]},"metadata":{},"sourceType":"module"}